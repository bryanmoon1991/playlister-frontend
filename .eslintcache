[{"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/BuildsContainer.js":"1","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/App.js":"2","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ArtistCard.js":"3","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Controls.js":"4","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistBuilder.js":"5","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Discovery.js":"6","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/UsersContainer.js":"7","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/BuildProfile.js":"8","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Search.js":"9","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/TracklistItem.js":"10","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/index.js":"11","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/RecommendedContainer.js":"12","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Preview.js":"13","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/actions.js":"14","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/rootReducer.js":"15","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/TopTrack.js":"16","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistItem.js":"17","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Result.js":"18","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/ResultsContainer.js":"19"},{"size":3953,"mtime":1614705027476,"results":"20","hashOfConfig":"21"},{"size":2260,"mtime":1610313172174,"results":"22","hashOfConfig":"21"},{"size":6032,"mtime":1609903858037,"results":"23","hashOfConfig":"21"},{"size":1307,"mtime":1609946289162,"results":"24","hashOfConfig":"21"},{"size":15624,"mtime":1614704762618,"results":"25","hashOfConfig":"21"},{"size":2042,"mtime":1610313447645,"results":"26","hashOfConfig":"21"},{"size":2912,"mtime":1610313294324,"results":"27","hashOfConfig":"21"},{"size":932,"mtime":1609961338241,"results":"28","hashOfConfig":"21"},{"size":1183,"mtime":1609728711828,"results":"29","hashOfConfig":"21"},{"size":2309,"mtime":1609792852079,"results":"30","hashOfConfig":"21"},{"size":806,"mtime":1608868082284,"results":"31","hashOfConfig":"21"},{"size":2658,"mtime":1609731734022,"results":"32","hashOfConfig":"21"},{"size":4386,"mtime":1609791299402,"results":"33","hashOfConfig":"21"},{"size":36379,"mtime":1610312167303,"results":"34","hashOfConfig":"21"},{"size":3618,"mtime":1610312893285,"results":"35","hashOfConfig":"21"},{"size":3975,"mtime":1609791862073,"results":"36","hashOfConfig":"21"},{"size":2236,"mtime":1609778398504,"results":"37","hashOfConfig":"21"},{"size":1285,"mtime":1609729610159,"results":"38","hashOfConfig":"21"},{"size":854,"mtime":1609729511560,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1olaaam",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/BuildsContainer.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/App.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ArtistCard.js",[],["88","89"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Controls.js",[],["90","91"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistBuilder.js",["92","93"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Discovery.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/UsersContainer.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/BuildProfile.js",[],["94","95"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Search.js",["96","97","98"],"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchSearch, clearResults } from '../Redux/actions';\nimport ResultsContainer from '../Containers/ResultsContainer';\n\nconst Search = ({ fetchSearch, spotifyApi }) => {\n  const [query, setQuery] = useState({ search: '' });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setQuery({ [name]: value });\n  };\n\n  useEffect(() => {\n    if (query.search === '') {\n      console.log('empty search field');\n    } else {\n      fetchSearch(query.search, spotifyApi);\n    }\n    return () => {\n      // need to fix\n      clearResults();\n    };\n  }, [query, fetchSearch]);\n\n  return (\n    <>\n      <h2>Begin playlist with an item from your search or...</h2>\n      <form>\n        <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"track title or artist name...\"\n          value={query.search}\n          onChange={handleChange}\n          autoComplete=\"off\"\n        />\n      </form>\n\n      <ResultsContainer spotifyApi={spotifyApi} />\n    </>\n  );\n};\n\nexport default connect(null, { fetchSearch, clearResults })(Search);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/TracklistItem.js",["99"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/index.js",[],["100","101"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/RecommendedContainer.js",["102"],"import { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport { fetchRecommended } from '../Redux/actions';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { wrap } from 'popmotion';\nimport { startNew } from '../Redux/actions';\nimport '../Styles/Recommended.css';\nimport * as BiIcons from 'react-icons/bi';\n\nconst msp = (state) => {\n  return {\n    user: state.user,\n    recommended: state.recommended,\n  };\n};\n\nconst variants = {\n  enter: (direction) => {\n    return {\n      x: direction > 0 ? 500 : -500,\n      opacity: 0,\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1,\n  },\n  exit: (direction) => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 500 : -500,\n      opacity: 0,\n    };\n  },\n};\n\nconst RecommendedContainer = ({\n  user,\n  startNew,\n  recommended,\n  fetchRecommended,\n  spotifyApi,\n}) => {\n  useEffect(() => {\n    fetchRecommended(spotifyApi);\n  }, []);\n\n  const [[page, direction], setPage] = useState([0, 0]);\n  const imageIndex = recommended.images\n    ? wrap(0, recommended.images.length, page)\n    : console.log('first render');\n  const paginate = (newDirection) => {\n    setPage([page + newDirection, newDirection]);\n  };\n\n  console.log(recommended);\n\n  return (\n    <>\n      {recommended.images && (\n        <>\n          <div className=\"recommended\">\n            <div className=\"next\" onClick={() => paginate(1)}>\n              <BiIcons.BiCaretLeft />\n            </div>\n            <AnimatePresence initial={false} custom={direction}>\n              <Link to={`/users/${user.id}/new`}>\n                <motion.img\n                  key={page}\n                  src={recommended.images[imageIndex].url}\n                  custom={direction}\n                  variants={variants}\n                  initial=\"enter\"\n                  animate=\"center\"\n                  exit=\"exit\"\n                  transition={{\n                    x: { type: 'spring', stiffness: 500, damping: 30 },\n                    opacity: { duration: 0.1 },\n                  }}\n                  onClick={() => {\n                    startNew(\n                      user.id,\n                      recommended.artists.items[imageIndex],\n                      spotifyApi\n                    );\n                  }}\n                />\n              </Link>\n            </AnimatePresence>\n            <div className=\"prev\" onClick={() => paginate(-1)}>\n              <BiIcons.BiCaretRight />\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default connect(msp, { fetchRecommended, startNew })(\n  RecommendedContainer\n);\n",["103","104"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Preview.js",["105"],"import React, { useEffect, useState } from 'react';\nimport { Grid, Popup, Header, Button } from 'semantic-ui-react';\nimport { createNext } from '../Redux/actions';\nimport { connect } from 'react-redux';\n\nconst Preview = ({\n  album,\n  spotifyApi,\n  createNext,\n  saveNotify,\n  unsaveNotify,\n}) => {\n  let [preview, setPreview] = useState(undefined);\n  let [info, setInfo] = useState({ album: '', title: '' });\n\n  useEffect(() => {\n    for (let i = 0; i < album.tracks.items.length; i++) {\n      let random = Math.floor(\n        Math.random() * Math.floor(album.tracks.items.length)\n      );\n      if (album.tracks.items[random].preview_url) {\n        setPreview(new Audio(album.tracks.items[random].preview_url));\n        setInfo({ album: album.name, title: album.tracks.items[random].name });\n        break;\n      }\n    }\n\n    return () => {\n      setPreview(undefined);\n      setInfo({ album: '', title: '' });\n    };\n  }, [spotifyApi]);\n\n  const playPreview = () => {\n    if (preview) {\n      let playPromise = preview.play();\n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            console.log('playing');\n          })\n          .catch(() => {\n            console.log('no preview available');\n          });\n      }\n    } else {\n      console.log('no preview for this artist');\n    }\n  };\n\n  const stopPreview = () => {\n    if (preview) {\n      preview.pause();\n      preview.currentTime = 0;\n    }\n  };\n\n  return (\n    <>\n      <Popup\n        size=\"mini\"\n        hoverable\n        hideOnScroll\n        trigger={\n          <div\n            style={\n              album.album_group === 'appears_on' ||\n              album.album_group === 'compilation'\n                ? {\n                    backgroundImage: `url(${\n                      album.images[album.images.length - 1].url\n                    })`,\n                    backgroundSize: 'cover',\n                    height: '32px',\n                    width: '32px',\n                  }\n                : {\n                    backgroundImage: `url(${\n                      album.images[album.images.length - 1].url\n                    })`,\n                    backgroundSize: 'cover',\n                    height: '64px',\n                    width: '64px',\n                  }\n            }\n            onMouseEnter={() => playPreview()}\n            onMouseLeave={() => stopPreview()}\n            onWheel={() => stopPreview()}\n            className=\"album-preview\"\n            onClick={() => {\n              createNext(album, spotifyApi);\n              stopPreview();\n            }}\n          />\n        }\n      >\n        <Grid columns={1}>\n          <Grid.Column textAlign=\"left\">\n            <Header as=\"h4\">{`Album: ${info.album}`}</Header>\n            <p>{`Preview Track: ${info.title}`}</p>\n            <Button.Group>\n              <Popup\n                mouseEnterDelay={500}\n                position=\"bottom center\"\n                size=\"mini\"\n                content={album.saved ? 'remove from saved' : 'save this album'}\n                trigger={\n                  album.saved ? (\n                    <Button\n                      icon=\"undo\"\n                      size=\"mini\"\n                      onClick={() => {\n                        unsaveNotify(album.name);\n                        spotifyApi.removeFromMySavedAlbums([album.id]);\n                      }}\n                    />\n                  ) : (\n                    <Button\n                      icon=\"save\"\n                      size=\"mini\"\n                      onClick={() => {\n                        saveNotify(album.name);\n                        spotifyApi.addToMySavedAlbums([album.id]);\n                      }}\n                    />\n                  )\n                }\n              />\n              <Popup\n                mouseEnterDelay={500}\n                position=\"bottom center\"\n                size=\"mini\"\n                content=\"open in spotify\"\n                trigger={\n                  <Button\n                    as=\"a\"\n                    target=\"_blank\"\n                    href={album.external_urls.spotify}\n                    icon=\"spotify\"\n                    size=\"mini\"\n                  />\n                }\n              />\n            </Button.Group>\n          </Grid.Column>\n        </Grid>\n      </Popup>\n    </>\n  );\n};\n\nexport default connect(null, { createNext })(Preview);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/actions.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/rootReducer.js",["106","107","108","109"],"import { combineReducers } from 'redux';\nimport produce from 'immer';\n\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst defaultState = {\n  user: null,\n  searchResults: null,\n  recommended: [],\n  playlistBuild: {},\n  relatedArtists: {},\n  currentSelection: {},\n  stack: [],\n  playlists: [],\n  preview: [],\n};\n\nconst currentUserReducer = (state = defaultState.user, action) => {\n  switch (action.type) {\n    case 'FETCH_CURRENT_USER':\n      return action.payload;\n    case 'LOGOUT':\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst currentUsersPlaylistsReducer = (\n  state = defaultState.playlists,\n  action\n) => {\n  switch (action.type) {\n    case 'GET_MY_PLAYLISTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst searchReducer = (state = defaultState.searchResults, action) => {\n  switch (action.type) {\n    case 'TYPE_TO_SEARCH':\n      return action.payload;\n    case 'CLEAR_RESULTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst recommendedReducer = (state = defaultState.recommended, action) => {\n  switch (action.type) {\n    case 'RECOMMENDED_ARTISTS_AND_TRACKS':\n      return action.payload;\n    case 'LOGOUT':\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst playlistBuildReducer = (state = defaultState.playlistBuild, action) => {\n  switch (action.type) {\n    case 'PLAYLIST_BUILD':\n      return action.payload;\n    case 'DELETE_BUILD':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst relatedArtistsReducer = produce((draft, action) => {\n  switch (action.type) {\n    case 'RELATED_ARTISTS':\n      return action.payload;\n    case 'ADD_TOP_TRACK':\n      draft.artists[action.index]['track'] = action.payload;\n      break;\n  }\n}, defaultState.relatedArtists);\n\nconst currentSelectionReducer = produce((draft, action) => {\n  switch (action.type) {\n    case 'SWITCH_CURRENT':\n      return action.payload;\n    case 'ADD_MORE':\n      draft.albums = [...draft.albums, ...action.payload];\n      break;\n  }\n}, defaultState.currentSelection);\n\nconst stackReducer = produce((draft, action) => {\n  switch (action.type) {\n    case 'INITIALIZE':\n      draft.length = 0;\n      draft.push(action.payload);\n      return draft;\n  }\n}, defaultState.stack);\n\nconst previewReducer = produce((draft, action) => {\n  switch (action.type) {\n    case 'PREVIEW_TRACKS':\n      let uniqueTracks = [];\n      let uniqueTracksIds = [...new Set(draft.map((track) => track.id))];\n\n      action.payload.forEach((track) => {\n        if (!uniqueTracksIds.includes(track.id)) {\n          uniqueTracks.push(track);\n        }\n      });\n\n      draft = [...draft, ...uniqueTracks];\n      return draft;\n    case 'REMOVE_PREVIEW':\n      let index = draft.findIndex((track) => track.id === action.payload.id);\n      draft.splice(index, 1);\n      return draft;\n    case 'CLEAR_TRACKS':\n      return action.payload;\n  }\n}, defaultState.preview);\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [\n    'user',\n    'recommended',\n    'playlistBuild',\n    'relatedArtists',\n    'currentSelection',\n    'stack',\n    'playlists',\n    'preview',\n  ],\n};\n\nconst rootReducer = combineReducers({\n  user: currentUserReducer,\n  searchResults: searchReducer,\n  recommended: recommendedReducer,\n  playlistBuild: playlistBuildReducer,\n  relatedArtists: relatedArtistsReducer,\n  currentSelection: currentSelectionReducer,\n  stack: stackReducer,\n  playlists: currentUsersPlaylistsReducer,\n  preview: previewReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/TopTrack.js",["110","111"],"import React, { useState } from 'react';\nimport { Grid, Popup, Header, Button } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { createNext } from '../Redux/actions';\n\nconst TopTrack = ({\n  track,\n  album,\n  saveNotify,\n  unsaveNotify,\n  addToBuildNotify,\n  addSeed,\n  createNext,\n  spotifyApi,\n}) => {\n  let [preview, setPreview] = useState(new Audio(track.preview_url));\n  let [info, setInfo] = useState({ album: album.name, title: track.name });\n\n  const playPreview = () => {\n    if (preview) {\n      let playPromise = preview.play();\n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            console.log('playing');\n          })\n          .catch(() => {\n            console.log('no preview available');\n          });\n      }\n    } else {\n      console.log('no preview for this artist');\n    }\n  };\n\n  const stopPreview = () => {\n    if (preview) {\n      preview.pause();\n      preview.currentTime = 0;\n    }\n  };\n\n  return (\n    <>\n      <Popup\n        size=\"mini\"\n        hoverable\n        hideOnScroll\n        trigger={\n          <div\n            style={{\n              backgroundImage: `url(${\n                album.images[album.images.length - 1].url\n              })`,\n              backgroundSize: 'cover',\n              height: '64px',\n              width: '64px',\n            }}\n            onMouseEnter={() => playPreview()}\n            onMouseLeave={() => stopPreview()}\n            onWheel={() => stopPreview()}\n            className=\"album-preview\"\n            onClick={() => {\n              createNext(album, spotifyApi);\n              stopPreview();\n            }}\n          />\n        }\n      >\n        <Grid columns={1}>\n          <Grid.Column textAlign=\"left\">\n            <Header as=\"h4\">{`Album: ${info.album}`}</Header>\n            <p>{`Track: ${info.title}`}</p>\n            <Button.Group>\n              <Popup\n                mouseEnterDelay={500}\n                position=\"bottom center\"\n                size=\"mini\"\n                content={track.saved ? 'Remove from Saved' : 'Save this Track'}\n                trigger={\n                  track.saved ? (\n                    <Button\n                      icon=\"undo\"\n                      size=\"mini\"\n                      onClick={() => {\n                        unsaveNotify(track.name);\n                        spotifyApi.removeFromMySavedTracks([track.id]);\n                      }}\n                    />\n                  ) : (\n                    <Button\n                      icon=\"save\"\n                      size=\"mini\"\n                      onClick={() => {\n                        saveNotify(track.name);\n                        spotifyApi.addToMySavedTracks([track.id]);\n                      }}\n                    />\n                  )\n                }\n              />\n              <Popup\n                mouseEnterDelay={500}\n                position=\"bottom center\"\n                size=\"mini\"\n                content={`Add ${info.title} to Playlist Build`}\n                trigger={\n                  <Button\n                    icon=\"add\"\n                    size=\"mini\"\n                    onClick={() => {\n                      addToBuildNotify(info.title);\n                      addSeed(track, album.images);\n                    }}\n                  />\n                }\n              />\n              <Popup\n                mouseEnterDelay={500}\n                position=\"bottom center\"\n                size=\"mini\"\n                content=\"Open in Spotify\"\n                trigger={\n                  <Button\n                    as=\"a\"\n                    target=\"_blank\"\n                    href={track.external_urls.spotify}\n                    icon=\"spotify\"\n                    size=\"mini\"\n                  />\n                }\n              />\n            </Button.Group>\n          </Grid.Column>\n        </Grid>\n      </Popup>\n    </>\n  );\n};\n\nexport default connect(null, { createNext })(TopTrack);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistItem.js",["112","113"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Result.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Containers/ResultsContainer.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"118"},{"ruleId":"116","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":89,"column":3,"nodeType":"122","messageId":"123","endLine":89,"endColumn":12},{"ruleId":"124","severity":1,"message":"125","line":142,"column":5,"nodeType":"126","endLine":142,"endColumn":7,"suggestions":"127"},{"ruleId":"114","replacedBy":"128"},{"ruleId":"116","replacedBy":"129"},{"ruleId":"120","severity":1,"message":"130","line":1,"column":38,"nodeType":"122","messageId":"123","endLine":1,"endColumn":44},{"ruleId":"120","severity":1,"message":"131","line":1,"column":46,"nodeType":"122","messageId":"123","endLine":1,"endColumn":57},{"ruleId":"124","severity":1,"message":"132","line":24,"column":6,"nodeType":"126","endLine":24,"endColumn":26,"suggestions":"133"},{"ruleId":"120","severity":1,"message":"134","line":5,"column":17,"nodeType":"122","messageId":"123","endLine":5,"endColumn":27},{"ruleId":"114","replacedBy":"135"},{"ruleId":"116","replacedBy":"136"},{"ruleId":"124","severity":1,"message":"137","line":48,"column":6,"nodeType":"126","endLine":48,"endColumn":8,"suggestions":"138"},{"ruleId":"114","replacedBy":"139"},{"ruleId":"116","replacedBy":"140"},{"ruleId":"124","severity":1,"message":"141","line":32,"column":6,"nodeType":"126","endLine":32,"endColumn":18,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":76,"column":3,"nodeType":"145","messageId":"146","endLine":82,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":86,"column":3,"nodeType":"145","messageId":"146","endLine":92,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":96,"column":3,"nodeType":"145","messageId":"146","endLine":101,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":105,"column":3,"nodeType":"145","messageId":"146","endLine":124,"endColumn":4},{"ruleId":"120","severity":1,"message":"134","line":16,"column":17,"nodeType":"122","messageId":"123","endLine":16,"endColumn":27},{"ruleId":"120","severity":1,"message":"147","line":17,"column":14,"nodeType":"122","messageId":"123","endLine":17,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":49,"column":9,"nodeType":"150","endLine":49,"endColumn":12},{"ruleId":"148","severity":1,"message":"149","line":60,"column":9,"nodeType":"150","endLine":60,"endColumn":12},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],["151"],["152"],"no-unused-vars","'previewed' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadBuild' and 'match'. Either include them or remove the dependency array. If 'loadBuild' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["153"],["151"],["152"],"'useRef' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'spotifyApi'. Either include it or remove the dependency array.",["154"],"'setPreview' is assigned a value but never used.",["151"],["152"],"React Hook useEffect has missing dependencies: 'fetchRecommended' and 'spotifyApi'. Either include them or remove the dependency array. If 'fetchRecommended' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["155"],["151"],["152"],"React Hook useEffect has missing dependencies: 'album.name' and 'album.tracks.items'. Either include them or remove the dependency array. If 'setPreview' needs the current value of 'album.tracks.items', you can also switch to useReducer instead of useState and read 'album.tracks.items' in the reducer.",["156"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'setInfo' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [loadBuild, match]",{"range":"165","text":"166"},"Update the dependencies array to be: [query, fetchSearch, spotifyApi]",{"range":"167","text":"168"},"Update the dependencies array to be: [fetchRecommended, spotifyApi]",{"range":"169","text":"170"},"Update the dependencies array to be: [album.name, album.tracks.items, spotifyApi]",{"range":"171","text":"172"},[2781,2783],"[loadBuild, match]",[690,710],"[query, fetchSearch, spotifyApi]",[981,983],"[fetchRecommended, spotifyApi]",[924,936],"[album.name, album.tracks.items, spotifyApi]"]