[{"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Search.js":"1","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/rootReducer.js":"2","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/actions.js":"3","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ResultsContainer.js":"4","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Result.js":"5","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/reportWebVitals.js":"6","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/index.js":"7","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/UsersContainer.js":"8","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/RecommendedContainer.js":"9","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/App.js":"10","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Discovery.js":"11","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistBuilder.js":"12","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ArtistBubble.js":"13","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ArtistCard.js":"14","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistItem.js":"15","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/UnpublishedContainer.js":"16"},{"size":1075,"mtime":1608313736005,"results":"17","hashOfConfig":"18"},{"size":3303,"mtime":1608306106576,"results":"19","hashOfConfig":"18"},{"size":6920,"mtime":1608665275709,"results":"20","hashOfConfig":"18"},{"size":1172,"mtime":1608313772365,"results":"21","hashOfConfig":"18"},{"size":2340,"mtime":1608313805380,"results":"22","hashOfConfig":"18"},{"size":362,"mtime":1607548221720,"results":"23","hashOfConfig":"18"},{"size":1086,"mtime":1608329103226,"results":"24","hashOfConfig":"18"},{"size":3365,"mtime":1608329253985,"results":"25","hashOfConfig":"18"},{"size":2177,"mtime":1608313653737,"results":"26","hashOfConfig":"18"},{"size":774,"mtime":1608313366475,"results":"27","hashOfConfig":"18"},{"size":1198,"mtime":1608662079130,"results":"28","hashOfConfig":"18"},{"size":2227,"mtime":1608314111049,"results":"29","hashOfConfig":"18"},{"size":1064,"mtime":1608663182625,"results":"30","hashOfConfig":"18"},{"size":1194,"mtime":1608665144290,"results":"31","hashOfConfig":"18"},{"size":404,"mtime":1608314124805,"results":"32","hashOfConfig":"18"},{"size":797,"mtime":1608263488886,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"1olaaam",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Search.js",["75"],"import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {fetchSearch} from '../Redux/actions'\nimport ResultsContainer from './ResultsContainer';\n\n\nconst Search = ({fetchSearch, spotifyApi}) => {\n    const [query, setQuery] = useState({search: ''})\n\n    const handleChange = (event) => {\n      const { name, value } = event.target;\n      setQuery({ [name]: value });\n    };\n\n    useEffect(() => {\n      if (query.search === '') {\n        console.log(\"empty search field\")\n      } else {\n        fetchSearch(query.search, spotifyApi)\n      }\n    }, [query, fetchSearch])\n\n    return (\n      <>\n      <h2>\n        Begin playlist with an item from your search or...\n      </h2>\n        <form>\n          <input\n            type=\"text\"\n            name=\"search\"\n            placeholder=\"track title or artist name...\"\n            value={query.search}\n            onChange={handleChange}\n          />\n        </form>\n\n        <ResultsContainer spotifyApi={spotifyApi}/> \n      </>\n    );\n}\n\n\nexport default connect(null, {fetchSearch})(Search);",["76","77"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/rootReducer.js",["78","79"],"import { combineReducers } from 'redux';\nimport produce from 'immer';\n\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst defaultState = {\n  user: null,\n  spotifyApi: null,\n  searchResults: null,\n  recommended: [],\n  playlistBuild: {},\n  relatedArtists: {},\n  currentArtist: {},\n  playlists: {},\n};\n\nconst currentUserReducer = (state = defaultState.user, action) => {\n  switch (action.type) {\n    case 'FETCH_CURRENT_USER':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst spotifyApiReducer = (state = defaultState.spotifyApi, action) => {\n    switch(action.type) {\n        case 'SET_AUTHORIZATION':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nconst currentUsersPlaylistsReducer = (state = defaultState.playlists, action) => {\n    switch (action.type) {\n        case 'GET_MY_PLAYLISTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nconst searchReducer = (state = defaultState.searchResults, action) => {\n  switch (action.type) {\n    case 'TYPE_TO_SEARCH':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst recommendedReducer = (state = defaultState.recommended, action) => {\n  switch (action.type) {\n    case 'RECOMMENDED_ARTISTS_AND_TRACKS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst playlistBuildReducer = (state = defaultState.playlistBuild, action) => {\n  switch (action.type) {\n    case 'PLAYLIST_BUILD':\n      return action.payload;\n    case 'DELETE_BUILD':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst playlistSeedsReducer = produce((draft, action) => {\n    switch (action.type) {\n        case 'FIRST_SEED':\n            draft.length = 0;\n            draft.push(action.payload)\n            return draft\n        case 'CREATE_SEEDS':\n            return action.payload\n        case 'NO_SEEDS':\n            return action.payload\n        case 'ADD_SEED':\n            draft.push(action.payload)\n            return draft;\n        case 'REMOVE_SEED':\n            const index = draft.findIndex(seed => seed.id === action.payload.id)\n            if (index !== -1) draft.splice(index, 1)\n    }\n}, defaultState.playlistSeeds)\n\n\n\n\nconst relatedArtistsReducer = (state = defaultState.relatedArtists, action) => {\n  switch (action.type) {\n    case 'RELATED_ARTISTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst currentArtistReducer = (state = defaultState.currentArtist, action) => {\n  switch (action.type) {\n    case 'CURRENT_ARTIST':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [\n    'user',\n    'spotifyApi',\n    'searchResults',\n    'recommended',\n    'playlistBuild',\n    'relatedArtists',\n    'currentArtist',\n    'playlists',\n  ],\n};\n\n\nconst rootReducer = combineReducers({\n  user: currentUserReducer,\n  spotifyApi: spotifyApiReducer,\n  searchResults: searchReducer,\n  recommended: recommendedReducer,\n  playlistBuild: playlistBuildReducer,\n  relatedArtists: relatedArtistsReducer,\n  currentArtist: currentArtistReducer,\n  playlists: currentUsersPlaylistsReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Redux/actions.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ResultsContainer.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Result.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/reportWebVitals.js",[],["80","81"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/index.js",["82"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport persistReducer from './Redux/rootReducer'\nimport rootReducer from './Redux/rootReducer'\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}> \n        <App />\n      </PersistGate>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["83","84"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/UsersContainer.js",["85","86"],"import React, {useEffect, useCallback} from 'react'\nimport {Switch, Route} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {fetchCurrentUser, fetchCurrentUsersPlaylists} from '../Redux/actions'\nimport Search from './Search'\nimport RecommendedContainer from './RecommendedContainer';\nimport Discovery from './Discovery';\nimport PlaylistBuilder from './PlaylistBuilder'\nimport './Views.css'\nimport UnpublishedContainer from './UnpublishedContainer';\nvar Spotify = require('spotify-web-api-js');\n\nconst msp = (state) => {\n    return {\n        user: state.user,\n        playlistBuild: state.playlistBuild\n    }\n}\n\nconst UsersContainer = ({user, fetchCurrentUser, fetchCurrentUsersPlaylists}) => {\n  let spotifyApi = new Spotify();\n  // if (user) {\n  //   spotifyApi.setAccessToken(user.access_token)\n  // }\n\n  const refreshUser = useCallback(() => {\n    console.log(\"use callback, refresh user occured\")\n    if (user) {\n      fetchCurrentUser(user.id)\n      setTimeout(refreshUser, 1800000);\n    }\n  }, [])\n  \n  useEffect(() => {\n    if (user) {\n      spotifyApi.setAccessToken(user.access_token)\n    } else {\n      refreshUser()\n    }\n  }, [user])\n\n  console.log('in user container:', spotifyApi);\n  // const createPlaylist = () => {\n  //     spotifyApi.createPlaylist(user.spotify_id, {\n  //         \"name\": 'New Playlist',\n  //         \"description\": \"New playlist description\",\n  //         \"public\": false\n  //     },\n  //     (err, data) => err ? console.log(err) : console.log(data));\n  // }\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/users/:id/playlists/:id\" component={PlaylistBuilder} />\n        <Route\n          path=\"/users/:id/playlists\"\n          render={({ match }) => {\n            fetchCurrentUsersPlaylists(match.params.id, spotifyApi);\n            console.log('test');\n            return (\n              <>\n                <div className=\"playlists\">\n                  <h3>Where the Playlists go</h3>\n                  <UnpublishedContainer />\n                </div>\n              </>\n            );\n          }}\n        />\n        <Route\n          path=\"/users/:id/new\"\n          render={() => {\n            return (\n              <>\n                <div className=\"discover\">\n                  <PlaylistBuilder />\n                  <Discovery spotifyApi={spotifyApi} />\n                </div>\n              </>\n            );\n          }}\n        />\n        <Route\n          path=\"/users/:id\"\n          render={({ match }) => {\n            user\n              ? console.log('user detected')\n              : fetchCurrentUser(match.params.id);\n\n            return (\n              <>\n                {user ? (\n                  <>\n                    <div className=\"home\">\n                      {/* <button onClick={() => createPlaylist()}>\n                            Create Test Playlist\n                          </button> */}\n                      <Search spotifyApi={spotifyApi}/>\n                      <h2>...a recommended item</h2>\n                      <RecommendedContainer spotifyApi={spotifyApi}/>\n                    </div>\n                  </>\n                ) : (\n                  <h1>loading</h1>\n                )}\n              </>\n            );\n          }}\n        />\n      </Switch>\n    </>\n  );\n}\n\n\nexport default connect(msp, {fetchCurrentUser, fetchCurrentUsersPlaylists})(UsersContainer);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/RecommendedContainer.js",["87","88"],"import {connect} from 'react-redux';\nimport React, {useEffect, useState} from 'react'\nimport {fetchRecommended} from '../Redux/actions'\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { wrap } from 'popmotion';\nimport './Recommended.css'\n\nconst msp = state => {\n    return {\n        user: state.user,\n        recommended: state.recommended\n    }\n}\n\nconst variants = {\n  enter: (direction) => {\n    return {\n      x: direction > 0 ? 500 : -500,\n      opacity: 0,\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1,\n  },\n  exit: (direction) => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 500 : -500,\n      opacity: 0,\n    };\n  },\n};\n\n\nconst RecommendedContainer = ({user, recommended, fetchRecommended, spotifyApi}) => {\n    \n  useEffect(() => {\n    fetchRecommended(spotifyApi)\n  }, [])\n\n  \n  const [[page, direction], setPage] = useState([0, 0]); \n\n  const imageIndex = recommended.images ? wrap(0, recommended.images.length, page) : console.log('first render')\n  \n  const paginate = (newDirection) => {\n    setPage([page + newDirection, newDirection]);\n  }; \n  \n  console.log(\"in container:\", recommended)\n\n  const autoFlip = () => {\n    paginate(1)\n    setTimeout(() => autoFlip(), 5000)\n  }\n\n  return (\n    <>\n      {recommended.images && (\n        <>\n        <div className=\"recommended\">\n          <div className=\"next\" onClick={() => paginate(1)}>\n            {'‣'}\n          </div>\n          <AnimatePresence initial={false} custom={direction}>\n            <motion.img\n              key={page}\n              src={recommended.images[imageIndex].url}\n              custom={direction}\n              variants={variants}\n              initial=\"enter\"\n              animate=\"center\"\n              exit=\"exit\"\n              transition={{\n                x: { type: 'spring', stiffness: 500, damping: 30 },\n                opacity: { duration: 0.1 },\n              }}\n            />\n          </AnimatePresence>\n          <div className=\"prev\" onClick={() => paginate(-1)}>\n            {'‣'}\n          </div>\n        </div>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default connect(msp, {fetchRecommended})(RecommendedContainer);\n","/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/App.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/Discovery.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistBuilder.js",["89"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ArtistBubble.js",["90"],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/ArtistCard.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/PlaylistItem.js",[],"/Users/bryanmoon/Flatiron/code/MOD_PROJECTS/playlister/playlister-frontend/src/Components/UnpublishedContainer.js",[],["91","92"],{"ruleId":"93","severity":1,"message":"94","line":21,"column":8,"nodeType":"95","endLine":21,"endColumn":28,"suggestions":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":74,"column":7,"nodeType":"103","messageId":"104","endLine":74,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":75,"column":5,"nodeType":"107","messageId":"108","endLine":90,"endColumn":6},{"ruleId":"97","replacedBy":"109"},{"ruleId":"99","replacedBy":"110"},{"ruleId":"101","severity":1,"message":"111","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":22},{"ruleId":"97","replacedBy":"112"},{"ruleId":"99","replacedBy":"113"},{"ruleId":"93","severity":1,"message":"114","line":32,"column":6,"nodeType":"95","endLine":32,"endColumn":8,"suggestions":"115"},{"ruleId":"93","severity":1,"message":"116","line":40,"column":6,"nodeType":"95","endLine":40,"endColumn":12,"suggestions":"117"},{"ruleId":"93","severity":1,"message":"118","line":41,"column":6,"nodeType":"95","endLine":41,"endColumn":8,"suggestions":"119"},{"ruleId":"101","severity":1,"message":"120","line":56,"column":22,"nodeType":"103","messageId":"104","endLine":56,"endColumn":30},{"ruleId":"93","severity":1,"message":"121","line":35,"column":5,"nodeType":"95","endLine":35,"endColumn":7,"suggestions":"122"},{"ruleId":"93","severity":1,"message":"94","line":11,"column":8,"nodeType":"95","endLine":11,"endColumn":19,"suggestions":"123"},{"ruleId":"97","replacedBy":"124"},{"ruleId":"99","replacedBy":"125"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'spotifyApi'. Either include it or remove the dependency array.","ArrayExpression",["126"],"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'playlistSeedsReducer' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["127"],["128"],"'persistReducer' is defined but never used.",["127"],["128"],"React Hook useCallback has missing dependencies: 'fetchCurrentUser' and 'user'. Either include them or remove the dependency array. If 'fetchCurrentUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["129"],"React Hook useEffect has missing dependencies: 'refreshUser' and 'spotifyApi'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has missing dependencies: 'fetchRecommended' and 'spotifyApi'. Either include them or remove the dependency array. If 'fetchRecommended' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["131"],"'autoFlip' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadBuild' and 'match'. Either include them or remove the dependency array. If 'loadBuild' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],["133"],["127"],["128"],{"desc":"134","fix":"135"},"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [query, fetchSearch, spotifyApi]",{"range":"146","text":"147"},"Update the dependencies array to be: [fetchCurrentUser, user]",{"range":"148","text":"149"},"Update the dependencies array to be: [refreshUser, spotifyApi, user]",{"range":"150","text":"151"},"Update the dependencies array to be: [fetchRecommended, spotifyApi]",{"range":"152","text":"153"},"Update the dependencies array to be: [loadBuild, match]",{"range":"154","text":"155"},"Update the dependencies array to be: [artist.id, spotifyApi]",{"range":"156","text":"157"},[585,605],"[query, fetchSearch, spotifyApi]",[1020,1022],"[fetchCurrentUser, user]",[1158,1164],"[refreshUser, spotifyApi, user]",[824,826],"[fetchRecommended, spotifyApi]",[1097,1099],"[loadBuild, match]",[398,409],"[artist.id, spotifyApi]"]